=== Basic
let <t1>x = 10;
let y = <c1>x;
-->
1: PASS

=== Cross-module with interface
--- Lib.re
let <t2><c3>a = 30;
let b = a;
--- Lib.rei
let <t1><c2><t3>a: int
---
let m = Lib.<c1>a;
-->
1: PASS
2: PASS
3: PASS

=== Kitchen sink
--- Lib.re
type <t7>record = {
  <t6>name: string,
  <t8><t5>age: int
};
type variant = <t10>A(int, float) | <t9>B(record);
type container = {v: variant, <t4>r: <c7>record};
let here = {<c6>name: "fred", age: 3};
let a = <c10>A(3, 4.);
--- Other.re
<t11>let thing = {Lib.name: "hi", age: 2};
let <t3>contain = {Lib.v: Lib.<c9>B({name: "inner", age: 1}), r: {name: "one", <c8>age: 5}};
---
let <t1>awesome_awesome = 10;
let <t2>m = <c1>awesome_awesome;
let z = string_of_int(<c2>m);
O<c11>ther.<c3>contain.<c4>r.<c5>age;
let m = Lib.A(2,3.);
-->
1: PASS
2: PASS
3: PASS
4: PASS
5: PASS
6: PASS
7: PASS
8: PASS
9: PASS
10: PASS
11: PASS

=== Single
let x = (~<t1>a, ~<t2>b: int) => <c1>a + <c2>b
-->
1: PASS
2: PASS

=== Module
module <t1><t2>X = {
  let num = 10;
  type <t3>t = int;
};
let m = <c1>X.num;
type r = <c2>X.<c3>t;
-->
1: PASS
2: PASS
3: Couldn't find a definition for the loc at 6, 11 file:///path/to/Test.re

=== Functor
module <t1>A = {
  module <t3><t2>B = (C: {let <t5>m: int}) => {
    let <t4>r = C.<c5>m;
  }
};
module C = <c1>A.<c2>B({let m = 20});
let z = <c3>C.<c4>r;
-->
1: PASS
2: PASS
3: PASS
4: PASS
5: PASS

=== Trace include
module X = {
  let <t1>num = 10;
};
include X;
let y = <c1>num;
-->
1: PASS

=== Cross-file include
--- One.re
let <t1>num = 10;
--- Two.re
include One;
---
let m = Two.<c1>num;
-->
1: PASS

=== Cross-file functor include
--- One__ns.re
module F = (Config: {let x: int}) => {
  let <t1>num = Config.x + 10;
};
--- Ns.re
module One = One__ns
--- Two.re
open Ns;
include One.F({let x = 20;});
---
let m = Two.<c1>num;
-->
1: PASS
